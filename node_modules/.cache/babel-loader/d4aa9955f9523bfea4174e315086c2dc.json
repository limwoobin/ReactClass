{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName } from '@material-ui/utils';\n/**\n * Enables ref forwarding on a given component that uses `innerRef` to forward refs\n * This is useful for component implementations that predate `forwardRef` and\n * used other props to forward refs.\n *\n * Instead of `<Component innerRef={ref} />` you can write\n * `<withForwardRef(Component) ref={ref} />`.\n *\n * This HOC does not handle prop collision. In\n * `<withForwardRef(Component) ref={ref} innerRef={innerRef} />` `innerRef` will be dropped\n *\n * Only copies statics from material-ui over.\n *\n * @param {React.ComponentType} Component\n * @returns {React.ForwardRefComponent}\n */\n\nexport default function withForwardedRef(Component) {\n  var ForwardRefComponent = React.forwardRef(function (props, ref) {\n    return (// We expect this component to be wrapped in `withStyles` in which `innerRef`\n      // is already intercepted and therefore won't appear in `props` here.\n      React.createElement(Component, _extends({}, props, {\n        innerRef: ref\n      }))\n    );\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    ForwardRefComponent.displayName = \"ForwardRef(\".concat(getDisplayName(Component), \")\");\n  }\n\n  return hoistNonReactStatics(ForwardRefComponent, Component);\n}","map":{"version":3,"sources":["/Applications/woobeenkun/myBlog/client/node_modules/@material-ui/core/esm/utils/withForwardedRef.js"],"names":["_extends","React","hoistNonReactStatics","getDisplayName","withForwardedRef","Component","ForwardRefComponent","forwardRef","props","ref","createElement","innerRef","process","env","NODE_ENV","displayName","concat"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA;;;;;;;;;;;;;;;;;AAiBA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AAClD,MAAIC,mBAAmB,GAAGL,KAAK,CAACM,UAAN,CAAiB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC/D,WAAQ;AACN;AACAR,MAAAA,KAAK,CAACS,aAAN,CAAoBL,SAApB,EAA+BL,QAAQ,CAAC,EAAD,EAAKQ,KAAL,EAAY;AACjDG,QAAAA,QAAQ,EAAEF;AADuC,OAAZ,CAAvC;AAFF;AAMD,GAPyB,CAA1B;;AASA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCR,IAAAA,mBAAmB,CAACS,WAApB,GAAkC,cAAcC,MAAd,CAAqBb,cAAc,CAACE,SAAD,CAAnC,EAAgD,GAAhD,CAAlC;AACD;;AAED,SAAOH,oBAAoB,CAACI,mBAAD,EAAsBD,SAAtB,CAA3B;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName } from '@material-ui/utils';\n/**\n * Enables ref forwarding on a given component that uses `innerRef` to forward refs\n * This is useful for component implementations that predate `forwardRef` and\n * used other props to forward refs.\n *\n * Instead of `<Component innerRef={ref} />` you can write\n * `<withForwardRef(Component) ref={ref} />`.\n *\n * This HOC does not handle prop collision. In\n * `<withForwardRef(Component) ref={ref} innerRef={innerRef} />` `innerRef` will be dropped\n *\n * Only copies statics from material-ui over.\n *\n * @param {React.ComponentType} Component\n * @returns {React.ForwardRefComponent}\n */\n\nexport default function withForwardedRef(Component) {\n  var ForwardRefComponent = React.forwardRef(function (props, ref) {\n    return (// We expect this component to be wrapped in `withStyles` in which `innerRef`\n      // is already intercepted and therefore won't appear in `props` here.\n      React.createElement(Component, _extends({}, props, {\n        innerRef: ref\n      }))\n    );\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    ForwardRefComponent.displayName = \"ForwardRef(\".concat(getDisplayName(Component), \")\");\n  }\n\n  return hoistNonReactStatics(ForwardRefComponent, Component);\n}"]},"metadata":{},"sourceType":"module"}